from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from .forms import UploadFileForm, code_text
# from .analyse import handleUploadedFile
import re
# Create your views here.

@login_required
def home(request):
	form = code_text()
	upload_form = UploadFileForm()
	return render(request, 'sqlflaws/home.html', {'title': home, 'form' :form, 'upload_form' : upload_form})

@login_required
def about(request):
	return render(request, 'sqlflaws/about.html', {'title': about})

@login_required
def result(request):
	return render(request, 'sqlflaws/result.html', {'title': result})


def analyse_switch(request):
	if re.search("switch", request):
		if re.search("default", request):
			result="No switch statement vulnerabilities: Default available"
		else:
			result = "Missing Default Case in Switch Statement"
			return result
		if re.search("break", request):
			result="No switch statement vulnerabilities: Break available"
		else:
			result = "Omitted Break Statement in Switch Statement"
			return result
	return result

def analyse_staticFields(request):
	if re.search("public static", request):
		if re.search("public static final", request): 
			result = "No public static field vulnerabilities: Public static field declared as final."
		else:
			result = "Public Static Field Not Marked as Final"
	return result

def analyse_finalize(request):
	if re.search(r'finalize\(\)', request):
		if re.search(r'super.finalize\(\)', request):
			result = "No finalize() vulnerabilities: finalize() contains super.finalize()."
		else:
			result = "finalize() does not contain super.finalize()."
	return result


# function to handle an uploaded file.
def upload_file(request):
    if request.method == 'POST':
        form = UploadFileForm(request.POST, request.FILES)
        if form.is_valid():
        	request_object = request.FILES['file'] 
        	content = handleUploadedFile(request_object)
        	t = analyze_file(request, content)	
        	return render(request, 'sqlflaws/result.html', {'t': t , 'textarea': content})
    else:
        form = UploadFileForm()
    return render(request, 'sqlflaws/home.html', {'form': form})

def handleUploadedFile(f):
	str_content = ''
	with open('codefile.txt', 'wb+') as destination:
		for chunk in f.chunks():
			destination.write(chunk)
	file = open('codefile.txt', 'r')
	if file.mode == 'r':
		str_content = file.read()		
	file.close()
	return str_content

def analyze_file(request, content):
	str_content = content
	t = "result"
	if re.search("switch", str_content):
		t = analyse_switch(str_content)
	if re.search(r'public static', str_content):
		t = analyse_staticFields(str_content)
	if re.search(r'finalize\(\)', str_content):
		t = analyse_finalize(str_content)
		print(type(str_content))
	return t


def analyze(request):
	if request.method == 'POST':
		textarea = ''
		t = "No vulnerability found."
		form = code_text(request.POST)
		if form.is_valid():
			textarea = form.cleaned_data.get('textarea')
			if re.search("switch", textarea):
				t = analyse_switch(textarea)
			if re.search(r'public static', textarea):
				t = analyse_staticFields(textarea)
			if re.search(r'finalize\(\)', textarea):
				t = analyse_finalize(textarea)

		return render(request, 'sqlflaws/result.html', {'t': t , 'textarea': textarea})
	else:
		form = code_text()
	return render(request, 'sqlflaws/home.html', {'form': form})